import os
import asyncio
import logging

from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message

from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton

from aiohttp import web

from channels import CHANNELS

# --- –¢–∏—à–µ –ª–æ–≥–æ–≤ ---
logging.getLogger("aiogram").setLevel(logging.WARNING)
logging.getLogger("aiohttp").setLevel(logging.WARNING)
logging.basicConfig(level=logging.WARNING)

GREETING = (
    "–ü—Ä–∏–≤–µ—Ç! üëã –ú–µ–Ω—è –∑–æ–≤—É—Ç –ö–∏—Ä–∏–ª–ª! –†–∞–¥ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!\n"
    "–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –∏ —Ä–µ—à–µ–Ω–∏—è–º–∏\n"
    "‚úÖ –ì–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã Excel / Google Sheets\n"
    "‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é Telegram-–±–æ—Ç–æ–≤\n"
    "‚úÖ –õ–∞–π—Ñ—Ö–∞–∫–∏ –ø–æ 3D-–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—é\n"
    "‚úÖ –ü–æ–ª–µ–∑–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –º—ã—Å–ª–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
    "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? ‚Üí –ü–∏—à–∏ –º–Ω–µ –≤ –õ–°: @shihaleevka ‚Äî —Å–¥–µ–ª–∞—é –ø–æ–¥ —Ç–≤–æ—é –∑–∞–¥–∞—á—É.\n\n"
    "–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ üëá \n"

)

router = Router()

def build_channels_keyboard():
    kb = InlineKeyboardBuilder()
    for name, url in CHANNELS:
        kb.add(InlineKeyboardButton(text=name, url=url))
    # –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥ (–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ 1, 3, 4 –∏ —Ç.–¥.)
    kb.adjust(2)
    return kb.as_markup()

@router.message(CommandStart())
async def on_start(message: Message):
    await message.answer(GREETING, reply_markup=build_channels_keyboard())

# --- aiohttp health-check –¥–ª—è UptimeRobot / Replit unsleep ---
async def health(_request):
    return web.Response(text="healthy")

async def index(_request):
    return web.Response(text="OK")

async def start_health_server():
    app = web.Application()
    app.router.add_get("/", index)
    app.router.add_get("/health", health)

    port = int(os.environ.get("PORT", "8080"))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, host="0.0.0.0", port=port)
    await site.start()

async def main():
    token = os.environ.get("TELEGRAM_API")
    if not token:
        raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_API –Ω–µ –∑–∞–¥–∞–Ω–∞.")

    # health-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
    await start_health_server()

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")  # –∫–∞–∫ –≤—ã –ø—Ä–æ—Å–∏–ª–∏

    bot = Bot(token=token)
    dp = Dispatcher()
    dp.include_router(router)

    # Long polling
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        pass
